# age = input("How old are you? ")

# if int(age) >= 18:
#     print("You are adult already.")
# else:
#     print("You are infant yet.")
#======================================================================
# a = input('Введіть число ')
# a = int(a)
# if a > 0:
#     print('Число додатне')
# elif a < 0:
#     print("Число від'ємне")
# else:
#     print('Це число - нуль')
#======================================================================
# a = input('Введіть число')
# a = int(a)
# if a > 0:
#     print('Число додатне')
# elif a == 1:
#     print('Число дорівнює 1')
# else:
#     print("a <= 0") #В такому випадку код для умови a == 1 ніколи не виконається.
#======================================================================
# money = 0
# if money:
#     print(f"You have {money} on your bank account")
# else:
#     print("You have no money and no debts")
#======================================================================
    
# user_name = input("Enter your name: ")

# if user_name:
#     print(f"Hello {user_name}")
# else:
#     print("Hi Anonym!")
#======================================================================
# None приводиться до False; порожній контейнер (порожній рядок тощо) приводиться до False
# result = None
# if result:
#     print(result)
# else:
#     print("Result is None, do something")
#======================================================================
#Складна усмова: Наприклад, щоб користувач міг орендувати автомобіль, потрібно, щоб у користувача обов'язково було вказане ім'я, користувач був старший 18 і були водійські права.
#Булева алгебра — це розділ математичної логіки, в якому вивчаються логічні операції над висловлюваннями.
#У Python оператори булевої алгебри — це оператори not, and, or

#   A      B     A and B  (a = True and False # False)
#   True  True    True
#   True  False   False
#   False True    False
#   False False   False
# 
#   A      B     A or B   (a = True or False  # True)
#   True  True    True
#   True  False   True
#   False True    True
#   False False   False
#
# not (НІ) заперечення, вираз виконується, якщо операнд — неправда.
#    A      not A    (a = not 2 < 0  # True)
#    True   False
#    False  True
#======================================================================
# name = "Taras"
# age = 22
# has_driver_licence = True

# if name and age >= 18 and has_driver_licence:
#     print(f"User {name} can rent a car")
#=====================================================================
#   Тернарні операції  — це ті самі умовні вирази, але в скороченій формі. 
#--------------------------------------
# is_nice = True
# state = "nice" if is_nice else "not nice"

# some_data = None
# msg = some_data or "Не було повернено даних" - У цьому прикладі msg містить рядок 'Не було повернено даних', це зручно, коли потрібно швидко перевірити значення та показати повідомлення, якщо значення None.
#---------------------------------------
#Зверніть увагу, що для скороченої форми використовується саме оператор or (АБО).

#=====================================================================
# --------------------Блоки інструкцій--------------------
# Щоб інтерпретатор сприйняв набір інструкцій як окремий блок, достатньо виділити всі інструкції цього блоку однаковою кількістю відступів зліва. 
# У Python рекомендується для виділення одного рівня вкладеності для блоку інструкцій використовувати 4 пробіли.
#-------------------------
# x = int(input("X: "))
# y = int(input("Y: "))

# if x == 0:
#     print("X can`t be equal to zero")
#     x = int(input("X: "))

# result = y / x
# print(result)
#-------------------------
# Ви також можете виділяти декілька рівнів вкладеності, додаючи ще 4 пробіли зліва для всіх інструкцій блоку:
# В цьому прикладі тричі повторюється перевірка на нерівність x нулю, і на кожну перевірку блок інструкцій виділяється додатковими 4-ма пробілами.
#-------------------------
# x = int(input("X: "))
# y = int(input("Y: "))

# if x == 0:
#     print("X can`t be equal to zero")
#     x = int(input("X: "))

#     if x == 0:
#         print("X can`t be equal to zero")
#         x = int(input("X: "))

#         if x == 0:
#             print("X can`t be equal to zero")
#             x = int(input("X: "))

# result = y / x
#-------------------------
#   Приклад вкладеності для визначення чвертей для координатної площини.
#------------------------
# if x >= 0:
#     if y >= 0:               # x > 0, y > 0
#         print("Перша чверть")
#     else:                    # x > 0, y < 0
#         print("Четверта чверть")
# else:
#     if y >= 0:               # x < 0, y > 0
#         print("Друга чверть")
#     else:                    # x < 0, y < 0
#         print("Третя чверть")
#----------------------------
# -----------------------------Цикли-------------------------
# 
    # цикл for, який ще називають ітеруючим, він перебирає усі елементи деякої послідовності;
    # цикл while, який виконується, доки виконується деяка умова.
#----------------------------
# fruit = 'apple'
# for char in fruit:
#     print(char)
#----------------------------
# Синтаксис циклу for:

#     цикл розпочинається з ключового слова for;
#     за яким обов'язково йде назва змінної, куди записуватиметься значення, що отримується з ітерованого об'єкту на кожній ітерації;
#     далі слідує ключове слово in;
#     за яким обов'язково йде вираз або об'єкт, по якому, власне, буде ітеруватися for;
#     далі ставиться :;
#     і з нового рядка з відступом йде набір виразів, які повторюватимуться на кожній ітерації

# Цикл while дозволяє виконати інструкції, які знаходяться у тілі циклу до тих пір, доки виконується умова, вказана в циклі. 
# Наприклад, цикл while, який виводить числа від 1 до 5:

# a = 1
# while a <= 5:
#     print(a)
#     a = a + 1
# !!!!!!! коли необхідно вийти з циклу до завершення ітерації, не дочекавшись, доки станеться чергова перевірка умови. 
#Для цього є команда break.
#--------------------------------
# a = 0
# while True:
#     print(a)
#     if a >= 20:
#         break
#     a = a + 1
# В цьому прикладі умова циклу буде виконуватися завжди, адже True завжди буде True.
#Це приклад нескінченного циклу. Але через перевірку, що a >= 20, цей цикл завершиться, щойно в a буде значення 20 або більше.
#Нескінченні цикли часто застосовуються там, де потрібно взаємодіяти з клієнтом, чекаючи введення від нього, і завершується тільки при настанні деякої умови.
#--------------------------------
#Наприклад echo скрипт, який виводить в консоль те, що ви введете, доки ви не введете exit:

# while True:
#     user_input = input()
#     print(user_input)
#     if user_input == "exit":
#         break
#-------------------------------
# є команда continue. Виклик цієї команди у тілі циклу призводить до того, що вирази цієї ітерації, що залишилися, 
#не будуть виконані, а інтерпретатор одразу перейде до наступної ітерації або перевірки умови.
#-------------------------------
# a = 0
# while a < 6:
#     a = a + 1
#     if not a % 2:
#         continue
#     print(a)   #Інструкція print(a) не виконувалась, коли a ділилося на 2 без залишку, оскільки ітерація завершувалася за допомогою continue.
#---------------------------------
# В цьому прикладі використовувався оператор отримання залишку від ділення %, він повертає таке число p, що якщо його відняти від r, то результат буде ділитися на x націло:
# (r - p) / x = a,
# де а, x, r — цілі числа.
# Оператори continue та break працюють тільки всередині одного циклу. В ситуації вкладених циклів немає способу вийти з усіх циклів одразу.
#
# while True:
#     number = input("number = ")
#     number = int(number)
#     while True:
#         print(number)
#         number = number - 1
#         if number < 0:
#             break

# В цьому прикладі користувач вводить число та отримує зворотний відлік від цього числа до 0 в консолі. При цьому, зовнішній нескінченний цикл жодним чином не перервати і break вийде тільки з внутрішнього циклу.
#----------------------------------
#Також використання continue або break поза циклом призводить до синтаксичної помилки.
# number = int(input("number = "))
# if number < 0:
#     break  #Такий код призводить до помилки SyntaxError. Такі помилки називаються виключеннями.

#============================================================
#------------------EXAMPLES----------------------------------
#=================== WHILE LOOP ===============================
# while True:
#     user_input = input('>>> ')
#     if user_input == 'exit':
#         break
#     else:
#         print(f'You write: {user_input}')
#=============================================================
# counter = 0
# while True:
#     user_input = input('>>> ')
#     counter +=1 #counter = counter + 1
#     if user_input == 'exit'or counter >=5:
#         break
#     else:
#         print(f'You write: {user_input}')
#---------- OR ----------------Прироботі з циклом думайте над логікою виходу 
# counter = 0
# while counter < 5:
#     user_input = input('>>> ')
#     counter +=1 #counter = counter + 1
#     if user_input == 'exit':
#         break
#     else:
#         print(f'You write: {user_input}')
#================================================================
while True:
    age = input("How old are you?")
    try: # (try and exept - за їх допомогою можемо вибирати валідні дані) як помилку перетворити в додаткове питання, якщо вік ввести буквами
        age = int(age) #перетворення типів 
        if age >= 18:
            print("Access allowed")
            break
        else:
            print("Access denied")
            break
    except ValueError: 
        print(f'{age} is not a number. Please write a number!')
    finally:
        print('-'*30) # сепаратер 